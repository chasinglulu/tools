From add388b133106c427bdce10612b9a370697296f4 Mon Sep 17 00:00:00 2001
From: "xinlu.wang" <xinlu.wang@horizon.ai>
Date: Fri, 15 Jul 2022 10:22:50 +0800
Subject: [PATCH] close trace function in bootloader

Signed-off-by: xinlu.wang <xinlu.wang@horizon.ai>
---
 arch/arm64/Kconfig.platforms                | 14 ++++++++----
 arch/arm64/boot/dts/hobot/Makefile          |  6 +++---
 arch/arm64/configs/j5_dvb_bringup_defconfig |  8 +++----
 arch/arm64/configs/j5_matrix5_defconfig     |  3 +--
 arch/arm64/kernel/entry-ftrace.S            |  5 +++++
 arch/arm64/kernel/ftrace.c                  |  3 +++
 fs/tracefs/inode.c                          |  4 ++++
 include/linux/ftrace.h                      |  1 +
 include/linux/trace_events.h                |  2 ++
 kernel/trace/Kconfig                        |  2 +-
 kernel/trace/blktrace.c                     |  3 +++
 kernel/trace/bpf_trace.c                    |  3 +++
 kernel/trace/ftrace.c                       |  6 ++++++
 kernel/trace/trace.c                        | 24 +++++++++++++++++++++
 kernel/trace/trace_branch.c                 |  9 ++++++++
 kernel/trace/trace_dynevent.c               |  3 +++
 kernel/trace/trace_events.c                 |  3 +++
 kernel/trace/trace_events_synth.c           |  7 ++++++
 kernel/trace/trace_functions_graph.c        |  6 ++++++
 kernel/trace/trace_hwlat.c                  |  3 +++
 kernel/trace/trace_irqsoff.c                |  9 ++++++++
 kernel/trace/trace_kprobe.c                 |  3 +++
 kernel/trace/trace_mmiotrace.c              |  3 +++
 kernel/trace/trace_output.c                 |  3 +++
 kernel/trace/trace_printk.c                 |  6 ++++++
 kernel/trace/trace_sched_wakeup.c           |  3 +++
 kernel/trace/trace_stack.c                  |  3 +++
 kernel/trace/trace_uprobe.c                 |  3 +++
 kernel/tracepoint.c                         |  5 +++++
 29 files changed, 139 insertions(+), 14 deletions(-)
 mode change 100755 => 100644 arch/arm64/Kconfig.platforms

diff --git a/arch/arm64/Kconfig.platforms b/arch/arm64/Kconfig.platforms
old mode 100755
new mode 100644
index 8b533deebbe1..8791b6d1d849
--- a/arch/arm64/Kconfig.platforms
+++ b/arch/arm64/Kconfig.platforms
@@ -333,12 +333,18 @@ config ARCH_HOBOT
 	  like the Journey 5.
 
 config HOBOT_J5
-	bool "J5 SOC Support"
+	bool "J5 SoC Support"
 	depends on ARCH_HOBOT
 	select PINCTRL_HOBOT_J5
-    select ARM_HOBOT_DMC_DEVFREQ
+	select ARM_HOBOT_DMC_DEVFREQ
 	help
-	  This enables Hobot J5 SOC support.
-	  You only need to enable this, if you want to support j5 soc.
+	  This enables Hobot J5 SOC support. If you want to support j5 soc,
+	  you need enable this option.
+
+config HOBOT_MATRIX
+	bool "Hobot Matrix platform support"
+	depends on ARCH_HOBOT
+	help
+	  This enables Hobot Matrix platform hardware support.
 
 endmenu
diff --git a/arch/arm64/boot/dts/hobot/Makefile b/arch/arm64/boot/dts/hobot/Makefile
index 3e45c7773145..245c07771f45 100644
--- a/arch/arm64/boot/dts/hobot/Makefile
+++ b/arch/arm64/boot/dts/hobot/Makefile
@@ -5,8 +5,8 @@ else
 dtb-$(CONFIG_ARCH_HOBOT) += hobot-j5-dvb.dtb
 endif
 dtb-$(CONFIG_ARCH_HOBOT) += hobot-j5-dvb-A.dtb hobot-j5-dvb-B.dtb hobot-j5-dvb-C.dtb hobot-j5-dvb-D.dtb
-dtb-$(CONFIG_ARCH_HOBOT) += hobot-j5-matrix-A.dtb hobot-j5-matrix-B.dtb hobot-j5-matrix-C.dtb hobot-j5-matrix-D.dtb
-dtb-$(CONFIG_ARCH_HOBOT) += hobot-j5-matrixp2-A.dtb hobot-j5-matrixp2-B.dtb hobot-j5-matrixp2-C.dtb hobot-j5-matrixp2-D.dtb hobot-j5-matrixp2-D-EP.dtb
-dtb-$(CONFIG_ARCH_HOBOT) += hobot-j5-matrixduo.dtb
+dtb-$(CONFIG_HOBOT_MATRIX) += hobot-j5-matrix-A.dtb hobot-j5-matrix-B.dtb hobot-j5-matrix-C.dtb hobot-j5-matrix-D.dtb
+dtb-$(CONFIG_HOBOT_MATRIX) += hobot-j5-matrixp2-A.dtb hobot-j5-matrixp2-B.dtb hobot-j5-matrixp2-C.dtb hobot-j5-matrixp2-D.dtb hobot-j5-matrixp2-D-EP.dtb
+dtb-$(CONFIG_HOBOT_MATRIX) += hobot-j5-matrixduo.dtb
 dtb-$(CONFIG_ARCH_HOBOT) += hobot-j5-cvb.dtb
 dtb-$(CONFIG_ARCH_HOBOT) += hobot-j5-evm.dtb hobot-j5-evm-rc.dtb hobot-j5-evm-ep.dtb
diff --git a/arch/arm64/configs/j5_dvb_bringup_defconfig b/arch/arm64/configs/j5_dvb_bringup_defconfig
index 7a0e6ef0d021..0400dd5a85aa 100644
--- a/arch/arm64/configs/j5_dvb_bringup_defconfig
+++ b/arch/arm64/configs/j5_dvb_bringup_defconfig
@@ -503,8 +503,6 @@ CONFIG_NLS_ISO8859_1=y
 CONFIG_SECURITY=y
 CONFIG_CRYPTO_USER=m
 CONFIG_CRYPTO_TEST=m
-CONFIG_CRYPTO_DH=m
-CONFIG_CRYPTO_ECDH=m
 CONFIG_CRYPTO_SM2=m
 CONFIG_CRYPTO_ECHAINIV=m
 CONFIG_CRYPTO_XTS=m
@@ -548,8 +546,10 @@ CONFIG_BOOTPARAM_HUNG_TASK_PANIC=y
 CONFIG_WQ_WATCHDOG=y
 CONFIG_TEST_LOCKUP=m
 # CONFIG_DEBUG_PREEMPT is not set
-CONFIG_STACKTRACE=y
 CONFIG_RCU_CPU_STALL_TIMEOUT=30
-# CONFIG_FTRACE is not set
+# CONFIG_TRACEPOINT_RCU_SWITCH_ON is not set
+CONFIG_IRQSOFF_TRACER=y
+CONFIG_PREEMPT_TRACER=y
+CONFIG_SCHED_TRACER=y
 # CONFIG_STRICT_DEVMEM is not set
 CONFIG_MEMTEST=y
diff --git a/arch/arm64/configs/j5_matrix5_defconfig b/arch/arm64/configs/j5_matrix5_defconfig
index 7a0e6ef0d021..040e7b5565de 100644
--- a/arch/arm64/configs/j5_matrix5_defconfig
+++ b/arch/arm64/configs/j5_matrix5_defconfig
@@ -43,6 +43,7 @@ CONFIG_BPF_SYSCALL=y
 CONFIG_PROFILING=y
 CONFIG_ARCH_HOBOT=y
 CONFIG_HOBOT_J5=y
+CONFIG_HOBOT_MATRIX=y
 CONFIG_ARM64_VA_BITS_48=y
 CONFIG_SCHED_MC=y
 CONFIG_SCHED_SMT=y
@@ -503,8 +504,6 @@ CONFIG_NLS_ISO8859_1=y
 CONFIG_SECURITY=y
 CONFIG_CRYPTO_USER=m
 CONFIG_CRYPTO_TEST=m
-CONFIG_CRYPTO_DH=m
-CONFIG_CRYPTO_ECDH=m
 CONFIG_CRYPTO_SM2=m
 CONFIG_CRYPTO_ECHAINIV=m
 CONFIG_CRYPTO_XTS=m
diff --git a/arch/arm64/kernel/entry-ftrace.S b/arch/arm64/kernel/entry-ftrace.S
index a338f40e64d3..c680a661215b 100644
--- a/arch/arm64/kernel/entry-ftrace.S
+++ b/arch/arm64/kernel/entry-ftrace.S
@@ -221,6 +221,10 @@ SYM_CODE_END(ftrace_graph_caller)
  */
 SYM_FUNC_START(_mcount)
 	mcount_enter
+	adr_l	x0, trace_switch
+	bl	static_key_count
+	cmp 	x0, #0x0
+	b.eq	skip
 
 	ldr_l	x2, ftrace_trace_function
 	adr	x0, ftrace_stub
@@ -242,6 +246,7 @@ skip_ftrace_call:			// }
 	cmp	x0, x2
 	b.ne	ftrace_graph_caller	//     ftrace_graph_caller();
 #endif /* CONFIG_FUNCTION_GRAPH_TRACER */
+skip:
 	mcount_exit
 SYM_FUNC_END(_mcount)
 EXPORT_SYMBOL(_mcount)
diff --git a/arch/arm64/kernel/ftrace.c b/arch/arm64/kernel/ftrace.c
index 86a5cf9bc19a..205a5328311a 100644
--- a/arch/arm64/kernel/ftrace.c
+++ b/arch/arm64/kernel/ftrace.c
@@ -238,6 +238,9 @@ void arch_ftrace_update_code(int command)
 
 int __init ftrace_dyn_arch_init(void)
 {
+	if (!static_branch_unlikely(&trace_switch))
+		return 1;
+
 	return 0;
 }
 #endif /* CONFIG_DYNAMIC_FTRACE */
diff --git a/fs/tracefs/inode.c b/fs/tracefs/inode.c
index 0ee8c6dfb036..5cece0158eda 100644
--- a/fs/tracefs/inode.c
+++ b/fs/tracefs/inode.c
@@ -23,6 +23,7 @@
 #include <linux/slab.h>
 
 #define TRACEFS_DEFAULT_MODE	0700
+extern struct static_key_false trace_switch;
 
 static struct vfsmount *tracefs_mount;
 static int tracefs_mount_count;
@@ -537,6 +538,9 @@ static int __init tracefs_init(void)
 {
 	int retval;
 
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	retval = sysfs_create_mount_point(kernel_kobj, "tracing");
 	if (retval)
 		return -EINVAL;
diff --git a/include/linux/ftrace.h b/include/linux/ftrace.h
index 1bd3a0356ae4..84eb16de6599 100644
--- a/include/linux/ftrace.h
+++ b/include/linux/ftrace.h
@@ -42,6 +42,7 @@
 
 /* Main tracing buffer and events set up */
 #ifdef CONFIG_TRACING
+extern struct static_key_false trace_switch;
 void trace_init(void);
 void early_trace_init(void);
 #else
diff --git a/include/linux/trace_events.h b/include/linux/trace_events.h
index 117f0621a509..0f1d42d910d1 100644
--- a/include/linux/trace_events.h
+++ b/include/linux/trace_events.h
@@ -616,6 +616,8 @@ struct trace_event_file {
 #define __TRACE_EVENT_FLAGS(name, value)				\
 	static int __init trace_init_flags_##name(void)			\
 	{								\
+		if (!static_branch_unlikely(&trace_switch))		\
+			return 0;					\
 		event_##name.flags |= value;				\
 		return 0;						\
 	}								\
diff --git a/kernel/trace/Kconfig b/kernel/trace/Kconfig
index 4077531badb5..55ebafa8e523 100644
--- a/kernel/trace/Kconfig
+++ b/kernel/trace/Kconfig
@@ -256,7 +256,7 @@ config IRQSOFF_TRACER
 	default n
 	depends on TRACE_IRQFLAGS_SUPPORT
 	depends on !ARCH_USES_GETTIMEOFFSET
-	select TRACE_IRQFLAGS
+#	select TRACE_IRQFLAGS
 	select GENERIC_TRACER
 	select TRACER_MAX_TRACE
 	select RING_BUFFER_ALLOW_SWAP
diff --git a/kernel/trace/blktrace.c b/kernel/trace/blktrace.c
index c300ac337573..b401162f9119 100644
--- a/kernel/trace/blktrace.c
+++ b/kernel/trace/blktrace.c
@@ -1646,6 +1646,9 @@ static struct trace_event trace_blk_event = {
 
 static int __init init_blk_tracer(void)
 {
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	if (!register_trace_event(&trace_blk_event)) {
 		pr_warn("Warning: could not register block events\n");
 		return 1;
diff --git a/kernel/trace/bpf_trace.c b/kernel/trace/bpf_trace.c
index 7a539d150ad2..7fc3a4f98005 100644
--- a/kernel/trace/bpf_trace.c
+++ b/kernel/trace/bpf_trace.c
@@ -2228,6 +2228,9 @@ static struct notifier_block bpf_module_nb = {
 
 static int __init bpf_event_init(void)
 {
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	register_module_notifier(&bpf_module_nb);
 	return 0;
 }
diff --git a/kernel/trace/ftrace.c b/kernel/trace/ftrace.c
index 30010614b923..fbd08a9cf15b 100644
--- a/kernel/trace/ftrace.c
+++ b/kernel/trace/ftrace.c
@@ -4316,6 +4316,9 @@ static struct ftrace_func_command ftrace_mod_cmd = {
 
 static int __init ftrace_mod_cmd_init(void)
 {
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	return register_ftrace_command(&ftrace_mod_cmd);
 }
 core_initcall(ftrace_mod_cmd_init);
@@ -6936,6 +6939,9 @@ struct ftrace_ops global_ops = {
 
 static int __init ftrace_nodyn_init(void)
 {
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	ftrace_enabled = 1;
 	return 0;
 }
diff --git a/kernel/trace/trace.c b/kernel/trace/trace.c
index 3602857934be..87e46a9d2fcf 100644
--- a/kernel/trace/trace.c
+++ b/kernel/trace/trace.c
@@ -52,6 +52,8 @@
 #include "trace.h"
 #include "trace_output.h"
 
+DEFINE_STATIC_KEY_FALSE(trace_switch);
+
 /*
  * On boot up, the ring buffer is set to the minimum size, so that
  * we do not waste memory on systems that are not using tracing.
@@ -210,6 +212,19 @@ static int __init set_ftrace_dump_on_oops(char *str)
 }
 __setup("ftrace_dump_on_oops", set_ftrace_dump_on_oops);
 
+static int __init set_trace_switch_on(char *str)
+{
+	static_branch_enable(&trace_switch);
+	pr_info("enable: %d\n", static_key_count((struct static_key *)&trace_switch));
+	if (!static_branch_unlikely(&trace_switch))
+		pr_info("enable: 111111111111\n");
+	else
+		pr_info("enable: 222222222222\n");
+	return 1;
+}
+__setup("trace_switch", set_trace_switch_on);
+
+
 static int __init stop_trace_on_warning(char *str)
 {
 	if ((strcmp(str, "=0") != 0 && strcmp(str, "=off") != 0))
@@ -9161,6 +9176,9 @@ static __init int tracer_init_tracefs(void)
 {
 	int ret;
 
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	trace_access_lock_init();
 
 	ret = tracing_init_dentry();
@@ -9623,6 +9641,9 @@ __init static int tracer_alloc_buffers(void)
 
 void __init early_trace_init(void)
 {
+	if (!static_branch_unlikely(&trace_switch))
+		return;
+
 	if (tracepoint_printk) {
 		tracepoint_print_iter =
 			kmalloc(sizeof(*tracepoint_print_iter), GFP_KERNEL);
@@ -9637,6 +9658,9 @@ void __init early_trace_init(void)
 
 void __init trace_init(void)
 {
+	if (!static_branch_unlikely(&trace_switch))
+		return;
+
 	trace_event_init();
 }
 
diff --git a/kernel/trace/trace_branch.c b/kernel/trace/trace_branch.c
index e47fdb4c92fb..155525952511 100644
--- a/kernel/trace/trace_branch.c
+++ b/kernel/trace/trace_branch.c
@@ -185,6 +185,9 @@ __init static int init_branch_tracer(void)
 {
 	int ret;
 
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	ret = register_trace_event(&trace_branch_event);
 	if (!ret) {
 		printk(KERN_WARNING "Warning: could not register "
@@ -378,6 +381,9 @@ __init static int init_annotated_branch_stats(void)
 {
 	int ret;
 
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	ret = register_stat_tracer(&annotated_branch_stats);
 	if (!ret) {
 		printk(KERN_WARNING "Warning: could not register "
@@ -443,6 +449,9 @@ __init static int all_annotated_branch_stats(void)
 {
 	int ret;
 
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	ret = register_stat_tracer(&all_branch_stats);
 	if (!ret) {
 		printk(KERN_WARNING "Warning: could not register "
diff --git a/kernel/trace/trace_dynevent.c b/kernel/trace/trace_dynevent.c
index 5fa49cfd2bb6..7999fb56fd8b 100644
--- a/kernel/trace/trace_dynevent.c
+++ b/kernel/trace/trace_dynevent.c
@@ -209,6 +209,9 @@ static __init int init_dynamic_event(void)
 	struct dentry *entry;
 	int ret;
 
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	ret = tracing_init_dentry();
 	if (ret)
 		return 0;
diff --git a/kernel/trace/trace_events.c b/kernel/trace/trace_events.c
index 7cfcf301b6e6..5b0588442c85 100644
--- a/kernel/trace/trace_events.c
+++ b/kernel/trace/trace_events.c
@@ -3437,6 +3437,9 @@ static __init int event_trace_enable_again(void)
 {
 	struct trace_array *tr;
 
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	tr = top_trace_array();
 	if (!tr)
 		return -ENODEV;
diff --git a/kernel/trace/trace_events_synth.c b/kernel/trace/trace_events_synth.c
index 881df991742a..d0755a36ef07 100644
--- a/kernel/trace/trace_events_synth.c
+++ b/kernel/trace/trace_events_synth.c
@@ -2070,6 +2070,9 @@ static __init int trace_events_synth_init_early(void)
 {
 	int err = 0;
 
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	err = dyn_event_register(&synth_event_ops);
 	if (err)
 		pr_warn("Could not register synth_event_ops\n");
@@ -2082,6 +2085,10 @@ static __init int trace_events_synth_init(void)
 {
 	struct dentry *entry = NULL;
 	int err = 0;
+
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	err = tracing_init_dentry();
 	if (err)
 		goto err;
diff --git a/kernel/trace/trace_functions_graph.c b/kernel/trace/trace_functions_graph.c
index b086ba8bb3d6..cd0226fd1cf3 100644
--- a/kernel/trace/trace_functions_graph.c
+++ b/kernel/trace/trace_functions_graph.c
@@ -1336,6 +1336,9 @@ static __init int init_graph_tracefs(void)
 {
 	int ret;
 
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	ret = tracing_init_dentry();
 	if (ret)
 		return 0;
@@ -1349,6 +1352,9 @@ fs_initcall(init_graph_tracefs);
 
 static __init int init_graph_trace(void)
 {
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	max_bytes_for_cpu = snprintf(NULL, 0, "%u", nr_cpu_ids - 1);
 
 	if (!register_trace_event(&graph_trace_entry_event)) {
diff --git a/kernel/trace/trace_hwlat.c b/kernel/trace/trace_hwlat.c
index 4c01c5d8b9a7..52e7e8503338 100644
--- a/kernel/trace/trace_hwlat.c
+++ b/kernel/trace/trace_hwlat.c
@@ -631,6 +631,9 @@ __init static int init_hwlat_tracer(void)
 {
 	int ret;
 
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	mutex_init(&hwlat_data.lock);
 
 	ret = register_tracer(&hwlat_tracer);
diff --git a/kernel/trace/trace_irqsoff.c b/kernel/trace/trace_irqsoff.c
index 588344f19100..589cb956f84f 100644
--- a/kernel/trace/trace_irqsoff.c
+++ b/kernel/trace/trace_irqsoff.c
@@ -654,12 +654,18 @@ static struct tracer irqsoff_tracer __read_mostly =
 #ifdef CONFIG_PREEMPT_TRACER
 void tracer_preempt_on(unsigned long a0, unsigned long a1)
 {
+	if (!static_branch_unlikely(&trace_switch))
+		return;
+
 	if (preempt_trace(preempt_count()) && !irq_trace())
 		stop_critical_timing(a0, a1);
 }
 
 void tracer_preempt_off(unsigned long a0, unsigned long a1)
 {
+	if (!static_branch_unlikely(&trace_switch))
+		return;
+
 	if (preempt_trace(preempt_count()) && !irq_trace())
 		start_critical_timing(a0, a1);
 }
@@ -734,6 +740,9 @@ static struct tracer preemptirqsoff_tracer __read_mostly =
 
 __init static int init_irqsoff_tracer(void)
 {
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 #ifdef CONFIG_IRQSOFF_TRACER
 	register_tracer(&irqsoff_tracer);
 #endif
diff --git a/kernel/trace/trace_kprobe.c b/kernel/trace/trace_kprobe.c
index 54b8378071d4..cae4e9d5c679 100644
--- a/kernel/trace/trace_kprobe.c
+++ b/kernel/trace/trace_kprobe.c
@@ -1903,6 +1903,9 @@ static __init int init_kprobe_trace_early(void)
 {
 	int ret;
 
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	ret = dyn_event_register(&trace_kprobe_ops);
 	if (ret)
 		return ret;
diff --git a/kernel/trace/trace_mmiotrace.c b/kernel/trace/trace_mmiotrace.c
index 7221ae0b4c47..0c203a4f125d 100644
--- a/kernel/trace/trace_mmiotrace.c
+++ b/kernel/trace/trace_mmiotrace.c
@@ -288,6 +288,9 @@ static struct tracer mmio_tracer __read_mostly =
 
 __init static int init_mmio_trace(void)
 {
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	return register_tracer(&mmio_tracer);
 }
 device_initcall(init_mmio_trace);
diff --git a/kernel/trace/trace_output.c b/kernel/trace/trace_output.c
index bc24ae8e3613..ee0ece7dac26 100644
--- a/kernel/trace/trace_output.c
+++ b/kernel/trace/trace_output.c
@@ -1398,6 +1398,9 @@ __init static int init_events(void)
 	struct trace_event *event;
 	int i, ret;
 
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	for (i = 0; events[i]; i++) {
 		event = events[i];
 
diff --git a/kernel/trace/trace_printk.c b/kernel/trace/trace_printk.c
index ff32476df072..bbdd0f4fc17a 100644
--- a/kernel/trace/trace_printk.c
+++ b/kernel/trace/trace_printk.c
@@ -369,6 +369,9 @@ static __init int init_trace_printk_function_export(void)
 {
 	int ret;
 
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	ret = tracing_init_dentry();
 	if (ret)
 		return 0;
@@ -383,6 +386,9 @@ fs_initcall(init_trace_printk_function_export);
 
 static __init int init_trace_printk(void)
 {
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	return register_module_notifier(&module_trace_bprintk_format_nb);
 }
 
diff --git a/kernel/trace/trace_sched_wakeup.c b/kernel/trace/trace_sched_wakeup.c
index f1c603358ff3..d37e67e2b5bb 100644
--- a/kernel/trace/trace_sched_wakeup.c
+++ b/kernel/trace/trace_sched_wakeup.c
@@ -800,6 +800,9 @@ __init static int init_wakeup_tracer(void)
 {
 	int ret;
 
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	ret = register_tracer(&wakeup_tracer);
 	if (ret)
 		return ret;
diff --git a/kernel/trace/trace_stack.c b/kernel/trace/trace_stack.c
index c408423e5d65..a581ceca8e87 100644
--- a/kernel/trace/trace_stack.c
+++ b/kernel/trace/trace_stack.c
@@ -556,6 +556,9 @@ static __init int stack_trace_init(void)
 {
 	int ret;
 
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	ret = tracing_init_dentry();
 	if (ret)
 		return 0;
diff --git a/kernel/trace/trace_uprobe.c b/kernel/trace/trace_uprobe.c
index a1ed96a7a462..592b8ff64a14 100644
--- a/kernel/trace/trace_uprobe.c
+++ b/kernel/trace/trace_uprobe.c
@@ -1640,6 +1640,9 @@ static __init int init_uprobe_trace(void)
 {
 	int ret;
 
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	ret = dyn_event_register(&trace_uprobe_ops);
 	if (ret)
 		return ret;
diff --git a/kernel/tracepoint.c b/kernel/tracepoint.c
index d7260f6614a6..d7c71a1c8eec 100644
--- a/kernel/tracepoint.c
+++ b/kernel/tracepoint.c
@@ -15,6 +15,8 @@
 #include <linux/sched/task.h>
 #include <linux/static_key.h>
 
+extern struct static_key_false trace_switch;
+
 enum tp_func_state {
 	TP_FUNC_0,
 	TP_FUNC_1,
@@ -697,6 +699,9 @@ static __init int init_tracepoints(void)
 {
 	int ret;
 
+	if (!static_branch_unlikely(&trace_switch))
+		return 0;
+
 	ret = register_module_notifier(&tracepoint_module_nb);
 	if (ret)
 		pr_warn("Failed to register tracepoint module enter notifier\n");
-- 
2.17.1

